syntax = "proto3";

package log.v1;

option go_package = "github.com/dmaizel/api/log_v1";

service Log {
    rpc Produce(ProduceRequest) returns (ProduceResponse) {}
    rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
    // a server-side streaming RPC where the client sends a request to the server and gets back a stream to read a sequence of messages.
    rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {}
    // a bidirectional streaming RPC where both the client and server send a sequence of messages using a read-write stream.
    rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {}
    // This is the endpoint resolvers will call to get the clusterâ€™s servers.
    rpc GetServers(GetServersRequest) returns (GetServersResponse) {}
}

message Record {
    bytes value = 1;
    uint64 offset = 2;
    uint64 term = 3;
    uint32 type = 4;
}

message ProduceRequest {
    Record record = 1;
}

message ProduceResponse {
    uint64 offset = 1;
}

message ConsumeRequest {
    uint64 offset = 1;
}

message ConsumeResponse {
    Record record = 2;
}

message GetServersRequest {}

// The endpoint response includes the server addresses clients should connect to and what server is the leader. 
// This information will tell the picker what server to send the server produce calls and what servers to send consume calls.
message GetServersResponse {
    repeated Server servers = 1;
}

message Server {
    string id = 1;
    string rpc_addr = 2;
    bool is_leader = 3;
}
